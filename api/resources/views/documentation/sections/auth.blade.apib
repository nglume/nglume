# Group Auth
This covers all of the authentication needs including password login, token login and token refreshing.
Auth uses [JSON Web Tokens](http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html) for authentication of
 all requests (that require authentication). JWT is used because authentication can be verified without a call to the
 database which makes for excellent performance.

## Login [/auth/jwt/login]
 A JWT is retrieved by issuing a GET request for a new token, the username
 and password are provided as an `Authorization: Basic` header

### Get new login token [GET]
+ Request
    + Headers

            Authorization: Basic {{ base64_encode($faker->email . ':' . $faker->password ) }}

+ Response 200 (application/json)

    + Body

            {!!

                $factory->get(\App\Models\AuthToken::class)
                    ->setTransformer(App\Http\Transformers\AuthTokenTransformer::class)
                    ->json()

            !!}

## Refresh Token [/auth/jwt/refresh]
*Before* tokens expire they can be renewed with a get request with the current valid token as an `Authorization: Bearer`
 header

### Refresh token [GET]
+ Request
    + Headers

            Authorization: Bearer {!! $factory->make(\App\Models\AuthToken::class)->token !!}

+ Response 200

            {!!

                $factory->get(\App\Models\AuthToken::class)
                    ->setTransformer(App\Http\Transformers\AuthTokenTransformer::class)
                    ->json()

            !!}

## Token Login [/auth/jwt/token]
Sometimes a user receives a token in a link by email that is exchanged with an auth token. Tokens are _always_ single
 use - a subsequent request with the same token must fail

### Login with token [GET]
+ Request
    + Headers

            Authorization: Token {!! $faker->regexify('[A-Za-z0-9]{30}'); !!}

+ Response 200

            {!! $factory->make(\App\Models\AuthToken::class)->token !!}


## Social Login [/auth/social/{provider}?returnUrl={returnUrl}]
A user can login by using a social profile as identification.

####  Provider Specific Notes

* **Google:** When setting up a Google App for oAuth2, make sure that you have
  `Google+ API Library` enabled on the page `APIs & auth/APIs` in the
  [Project Console](https://console.developers.google.com/project) or the
  request to Google will not return any user data.
* **Twitter:** For Twitter to return the email address, which is required by the
  Spira application, the application must be whitelisted by Twitter. If not
  Twitter returns the email address as `null`. To whitelist your app with
  Twitter read
  [here](https://twittercommunity.com/t/how-to-get-email-from-twitter-user-using-oauthtokens/558/185)
  and/or
  [here](https://dev.twitter.com/rest/reference/get/account/verify_credentials)
  to find the current form to request an app to be whitelisted.

### Auth with social provider [GET]

+ Parameters
    + provider (required, string, `facebook`) ... The social provider to auth against.
    + returnUrl (optional, url, `http%3A%2F%2Fapi.spira.io`) ... The url to return to after a successful auth process, if not provided the root url will be returned.

+ Response 302
    + Headers

            Location: https://www.facebook.com/v2.4/dialog/oauth?client_id=457398928507539&redirect_uri=http%3A%2F%2Fapi.spira.io%2Fauth%2Fsocial%2Ffacebook%2Fcallback&scope=email&response_type=code&state=PdUvOcZpQ9FdxIlyoGXEdJ9zFPh5AqK0NUDiQa5F

## Social Login Callback [/auth/social/{provider}/callback]

After the user has authenticated with the social provider, the provider returns
to the application with the authentication details to this route.

### Callback from social provider [GET]

+ Parameters
    + provider (required, string, `facebook`) ... The social provider the callback comes from.

+ Response 302

    + Headers

            Location: http://spira.io?jwtAuthToken={!! $factory->make(\App\Models\AuthToken::class)->token !!}


## Vanilla SSO [/auth/sso/vanilla{?client_id,timestamp,signature,callback}]

When a user visits vanilla forum, Vanilla pings this route to retrieve information
about the current user. This route is to be used by Vanilla alone.

If the user is logged in via Spira, the user has a button with the Spira username,
Spira profile image for sign in. Pressing this signs in the user immediately to
the forum.

If sending the user to the url `http://forum.spira.io/sso` the user arrives
signed in immediately without having to do manually initiate the single sign on
operation.

Optionally, a `Target` parameter with a relative path can be provided to specify
where the user should ultimately land on the forum after sso id done.

Example: `http://forum.spira.io/sso?Target=/categories`.

This will make linking from other pages on the site to the forum a seamless
experience.

### Respond to Vanilla [GET]

+ Parameters
    + client_id (required, string, `1145259210`) ... The shared client id to identify the site.
    + timestamp (string, `1439186932`) ... For secure requests, Vanilla will send the timestamp of its request.
    + signature (string, `02e45f687969c87e6de29c4305ac9847`) ... For secure requests, Vanilla will sign the timestamp parameter.
    + callback (string, `/categories`) ... The name of the callback function Vanilla will perform on succesful sign on.

+ Response 200

    + Body

            {!!
                json_encode(App\Services\SingleSignOn\SingleSignOnFactory::create(
                  'vanilla',
                  Request::instance(),
                  $factory->get(\App\Models\User::class)->modified())->formatUser()
                );
            !!}


