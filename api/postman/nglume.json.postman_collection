{
	"id": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
	"name": "nglume",
	"description": "",
	"order": [],
	"folders": [
		{
			"id": "b3fdc7c9-ffe2-f612-ee21-9be07bc3aaac",
			"name": "0_setup",
			"description": "",
			"write": true,
			"order": [
				"c3bb4042-dd95-5a5f-d4c7-e9992d4c7eee",
				"2a426ca8-abd0-d144-b27c-d2da66c68716",
				"7ff4e1cc-f0db-9e38-8e53-0531c836cca1"
			],
			"collection_name": "nglume",
			"collection_owner": "15020",
			"collection_id": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"collection": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"owner": "15020",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2"
		},
		{
			"id": "308d7d0f-e3cd-127d-5e62-5f32ad73139a",
			"name": "10_exceptionTests",
			"description": "",
			"write": true,
			"order": [
				"1879c8ee-70ff-7ed9-f654-f2fdda7a7f45",
				"fdf53645-7584-a5a6-b1a8-73c2fa3c0da0",
				"74efb82f-1e5d-aca2-81f6-4b321f3d2ee6"
			],
			"collection_name": "nglume",
			"collection_owner": "15020",
			"collection_id": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"collection": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"owner": "15020",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2"
		},
		{
			"id": "6d013cc2-4559-32f5-f65a-84b067667655",
			"name": "20_cacheTests",
			"description": "",
			"write": true,
			"order": [
				"32f8d71e-b0e9-f54c-5f53-eb26888d7b47",
				"8813cc14-4e07-a927-6e39-21073955e99c"
			],
			"collection_name": "nglume",
			"collection_owner": "15020",
			"collection_id": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"collection": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"owner": "15020",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2"
		},
		{
			"id": "5f47950b-26f0-8421-d6e4-d251bfec3944",
			"name": "20_emailTests",
			"description": "",
			"write": true,
			"order": [
				"906334b8-1ec9-3edf-064a-01180a0b5307",
				"99c5077d-9004-fbc7-c120-0104bcdac1f3"
			],
			"collection_name": "nglume",
			"collection_owner": "15020",
			"collection_id": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"collection": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"owner": "15020",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2"
		},
		{
			"id": "cfc6b181-c497-f3b7-f8b7-2bae9d31fd12",
			"name": "20_entityTests",
			"description": "",
			"write": true,
			"order": [
				"a9c378ab-5520-42c5-0761-c55f240d7af5",
				"d4fa250b-2752-5b6d-21a7-38e9336062e8"
			],
			"collection_name": "nglume",
			"collection_owner": "15020",
			"collection_id": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"collection": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"owner": "15020",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2"
		},
		{
			"id": "7dcea7f4-0574-3e0d-3916-9c86f5483fff",
			"name": "20_logTests",
			"description": "",
			"write": true,
			"order": [
				"3a6e444c-30bb-2524-dae0-5677ed596a07"
			],
			"collection_name": "nglume",
			"collection_owner": "15020",
			"collection_id": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"collection": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"owner": "15020",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2"
		},
		{
			"id": "4e7dfff6-554b-6ea5-c05d-34669cc0e8ea",
			"name": "20_queueTests",
			"description": "",
			"write": true,
			"order": [
				"c640c1aa-e996-97bb-949d-f334e13ae5d4",
				"f70e3b3e-ac9c-e354-d594-7c22dd5ef48a",
				"0c322cc3-9125-8836-7322-ea1572b234e2"
			],
			"collection_name": "nglume",
			"collection_owner": "15020",
			"collection_id": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"collection": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"owner": "15020",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2"
		}
	],
	"timestamp": 1427604086234,
	"synced": false,
	"owner": "15020",
	"sharedWithTeam": false,
	"subscribed": false,
	"remoteLink": "",
	"public": false,
	"write": true,
	"requests": [
		{
			"id": "0c322cc3-9125-8836-7322-ea1572b234e2",
			"headers": "",
			"url": "{{host}}/users",
			"preRequestScript": "function pausecomp(millis)\n {\n  var date = new Date();\n  var curDate = null;\n  do { curDate = new Date(); }\n  while(curDate-date < millis);\n}\n\npausecomp(2000); //wait 2 seconds to allow queue runner to execute.",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Response is array\"] = _.isArray(data);\n    \n    tests[\"current count (\"+data.length+\") == old count (\"+globals.userCount+\") + 1\"] = data.length === Number(globals.userCount) + 1;\n    \n}catch(e){\n    tests[e.message] = false;\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1431994834263,
			"name": "queue: count users",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"write": true,
			"folder": "4e7dfff6-554b-6ea5-c05d-34669cc0e8ea",
			"synced": false,
			"owner": 0
		},
		{
			"id": "1879c8ee-70ff-7ed9-f654-f2fdda7a7f45",
			"headers": "Accept: application/json\n",
			"url": "{{host}}/this-url-does-not-exist",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\ntry {\n    var data = JSON.parse(responseBody);\n    tests[\"Error response has message\"] = !!data.message;\n    tests[\"Error message is not empty\"] = data.message.length > 0;\n}catch(e){\n    tests[e.message] = false;\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1431998526433,
			"name": "exception: invalid route",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "308d7d0f-e3cd-127d-5e62-5f32ad73139a"
		},
		{
			"id": "2a426ca8-abd0-d144-b27c-d2da66c68716",
			"headers": "",
			"url": "{{mailcatcherHost}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1432009368777,
			"name": "email: check mailcatcher up",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "b3fdc7c9-ffe2-f612-ee21-9be07bc3aaac"
		},
		{
			"id": "32f8d71e-b0e9-f54c-5f53-eb26888d7b47",
			"headers": "Content-Type: application/json\n",
			"url": "{{host}}/test/cache/cacheTest",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 204\"] = responseCode.code === 204;\n    \n    \n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1432079884634,
			"name": "cache: add",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false,
			"rawModeData": "{\n    \"key\": \"cacheTest\",\n    \"value\": \"cacheValue\"\n}",
			"owner": 0,
			"folder": "6d013cc2-4559-32f5-f65a-84b067667655"
		},
		{
			"id": "3a6e444c-30bb-2524-dae0-5677ed596a07",
			"headers": "Content-Type: application/json\n",
			"url": "{{host}}/test/logs",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 204\"] = responseCode.code === 204;\n    \n    \n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1432363628899,
			"name": "log: add",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false,
			"rawModeData": "[\n    {\n        \"type\": \"info\",\n        \"message\": \"test info log\"\n    },\n    {\n        \"type\": \"warning\",\n        \"message\": \"test warning log\"\n    },\n    {\n        \"type\": \"error\",\n        \"message\": \"test error log\"\n    }\n]"
		},
		{
			"id": "74efb82f-1e5d-aca2-81f6-4b321f3d2ee6",
			"headers": "Accept: application/json\n",
			"url": "{{host}}/test/fatal-error",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntests[\"Status code is 500\"] = responseCode.code === 500;\n\n\ntry {\n    var data = JSON.parse(responseBody);\n    tests[\"Error response has message\"] = !!data.message;\n    tests[\"Error message is not empty\"] = data.message.length > 0;\n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1432626587875,
			"name": "exception: fatal error",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false
		},
		{
			"id": "7ff4e1cc-f0db-9e38-8e53-0531c836cca1",
			"headers": "",
			"url": "{{mailcatcherHost}}/messages",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 204\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1432009117437,
			"name": "email: empty inbox",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false,
			"folder": "b3fdc7c9-ffe2-f612-ee21-9be07bc3aaac",
			"isFromCollection": true,
			"collectionRequestId": "7ff4e1cc-f0db-9e38-8e53-0531c836cca1",
			"owner": 0
		},
		{
			"id": "8813cc14-4e07-a927-6e39-21073955e99c",
			"headers": "",
			"url": "{{host}}/test/cache/cacheTest",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Cache response is object\"] = _.isObject(data);\n    \n    tests[\"Cache response has key\"] = _.has(data, 'key');\n    tests[\"Cache response has value\"] = _.has(data, 'value');\n    \n    tests[\"Cache response key is correct\"] = data['key'] == 'cacheTest';\n    tests[\"Cache response value is correct\"] = data['value'] == 'cacheValue';\n    \n}catch(e){\n    tests[e.message] = false;\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1432078272565,
			"name": "cache: check cache",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "6d013cc2-4559-32f5-f65a-84b067667655"
		},
		{
			"id": "906334b8-1ec9-3edf-064a-01180a0b5307",
			"headers": "Content-Type: application/json\n",
			"url": "{{host}}/test/email",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Response code is 1\"] = data.response_code == 1;\n    \n    \n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1432010172487,
			"name": "email: send",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false,
			"rawModeData": "{\n    \"subject\": \"Test Email\"\n}",
			"owner": 0,
			"folder": "5f47950b-26f0-8421-d6e4-d251bfec3944"
		},
		{
			"id": "99c5077d-9004-fbc7-c120-0104bcdac1f3",
			"headers": "",
			"url": "{{mailcatcherHost}}/messages",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Inbox has message\"] = _.isArray(data) && data.length == 1;\n    \n    tests[\"Email has subject\"] = _.has(data[0], 'subject');\n    tests[\"Subject is 'Test Email'\"] = data[0].subject == 'Test Email';\n    \n}catch(e){\n    tests[e.message] = false;\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1432009294008,
			"name": "email: check mail",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false,
			"folder": "5f47950b-26f0-8421-d6e4-d251bfec3944",
			"owner": 0
		},
		{
			"id": "a9c378ab-5520-42c5-0761-c55f240d7af5",
			"headers": "",
			"url": "{{host}}/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Response is array\"] = _.isArray(data);\n    \n    \n    postman.setGlobalVariable(\"firstUserId\", data[0].user_id);\n    \n    tests[\"UserCount: \"+data.length] = true;\n    \n}catch(e){\n    tests[e.message] = false;\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1431994275247,
			"name": "Get all users",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "cfc6b181-c497-f3b7-f8b7-2bae9d31fd12"
		},
		{
			"id": "c3bb4042-dd95-5a5f-d4c7-e9992d4c7eee",
			"headers": "",
			"url": "{{host}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1432011664039,
			"name": "base: check api is up",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "b3fdc7c9-ffe2-f612-ee21-9be07bc3aaac"
		},
		{
			"id": "c640c1aa-e996-97bb-949d-f334e13ae5d4",
			"headers": "",
			"url": "{{host}}/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Response is array\"] = _.isArray(data);\n    \n    postman.setGlobalVariable(\"userCount\", data.length);\n    \n    tests[\"User count is: \"+data.length] = true;\n    \n}catch(e){\n    tests[e.message] = false;\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1431994171734,
			"name": "queue: get all users",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"write": true,
			"folder": "4e7dfff6-554b-6ea5-c05d-34669cc0e8ea",
			"synced": false,
			"owner": 0
		},
		{
			"id": "d4fa250b-2752-5b6d-21a7-38e9336062e8",
			"headers": "",
			"url": "{{host}}/users/{{firstUserId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Response is object\"] = _.isObject(data);\n    \n    \n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1431994278790,
			"name": "Get a user",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "cfc6b181-c497-f3b7-f8b7-2bae9d31fd12"
		},
		{
			"id": "f70e3b3e-ac9c-e354-d594-7c22dd5ef48a",
			"headers": "",
			"url": "{{host}}/test/queue",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    var data = JSON.parse(responseBody);\n    \n    \n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1431930351102,
			"name": "queue: create user",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"write": true,
			"folder": "4e7dfff6-554b-6ea5-c05d-34669cc0e8ea",
			"synced": false,
			"owner": 0
		},
		{
			"id": "fdf53645-7584-a5a6-b1a8-73c2fa3c0da0",
			"headers": "Accept: application/json\n",
			"url": "{{host}}/test/internal-exception",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 500\"] = responseCode.code === 500;\n\n\ntry {\n    var data = JSON.parse(responseBody);\n    tests[\"Error response has message\"] = !!data.message;\n    tests[\"Error message is not empty\"] = data.message.length > 0;\n}catch(e){\n    tests[e.message] = false;\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1431998531084,
			"name": "exception: internal exception",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false,
			"owner": 0,
			"folder": "308d7d0f-e3cd-127d-5e62-5f32ad73139a"
		}
	]
}