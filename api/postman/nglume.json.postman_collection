{
	"id": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
	"name": "nglume",
	"description": "",
	"order": [],
	"folders": [
		{
			"id": "308d7d0f-e3cd-127d-5e62-5f32ad73139a",
			"name": "Basic Tests",
			"description": "",
			"write": true,
			"order": [
				"c3bb4042-dd95-5a5f-d4c7-e9992d4c7eee",
				"1879c8ee-70ff-7ed9-f654-f2fdda7a7f45",
				"fdf53645-7584-a5a6-b1a8-73c2fa3c0da0",
				"b5a7d9cb-4933-a1d5-dba9-c523837883cc",
				"eae2d54d-f5b4-0606-7e2d-86fe97da00cf",
				"7c43c7be-e9d3-619d-1fca-ffa78c80a555",
				"e0e7fa90-47bf-5301-042b-a3500d855a14"
			],
			"collection_name": "nglume",
			"collection_owner": "46236",
			"collection_id": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"collection": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"owner": "46236",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2"
		},
		{
			"id": "cfc6b181-c497-f3b7-f8b7-2bae9d31fd12",
			"name": "Entity test",
			"description": "",
			"write": true,
			"order": [
				"a9c378ab-5520-42c5-0761-c55f240d7af5",
				"d4fa250b-2752-5b6d-21a7-38e9336062e8"
			],
			"collection_name": "nglume",
			"collection_owner": "46236",
			"collection_id": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"collection": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"owner": "46236",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2"
		}
	],
	"timestamp": 1427604086234,
	"synced": false,
	"owner": "46236",
	"sharedWithTeam": false,
	"subscribed": false,
	"remoteLink": "",
	"public": false,
	"write": true,
	"requests": [
		{
			"id": "1879c8ee-70ff-7ed9-f654-f2fdda7a7f45",
			"headers": "Accept: application/json\n",
			"url": "{{host}}/this-url-does-not-exist",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\ntry {\n    var data = JSON.parse(responseBody);\n    tests[\"Error response has message\"] = !!data.message;\n    tests[\"Error message is not empty\"] = data.message.length > 0;\n}catch(e){\n    tests[e.message] = false;\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1431998526433,
			"name": "exception: invalid route",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false
		},
		{
			"id": "7c43c7be-e9d3-619d-1fca-ffa78c80a555",
			"headers": "",
			"url": "{{host}}/test/queue",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    var data = JSON.parse(responseBody);\n    \n    \n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1431930351102,
			"name": "queue: create user",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false
		},
		{
			"id": "a9c378ab-5520-42c5-0761-c55f240d7af5",
			"headers": "",
			"url": "{{host}}/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Response is array\"] = _.isArray(data);\n    \n    \n    postman.setGlobalVariable(\"firstUserId\", data[0].user_id);\n    \n    tests[\"UserCount: \"+data.length] = true;\n    \n}catch(e){\n    tests[e.message] = false;\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1431994275247,
			"name": "Get all users",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false
		},
		{
			"id": "b5a7d9cb-4933-a1d5-dba9-c523837883cc",
			"headers": "",
			"url": "{{host}}/test/email",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Response code is 1\"] = data.response_code == 1;\n    \n    \n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1431930323456,
			"name": "email: send",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false
		},
		{
			"id": "c3bb4042-dd95-5a5f-d4c7-e9992d4c7eee",
			"headers": "",
			"url": "{{host}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1427619455849,
			"name": "base: GET /",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false,
			"owner": "46236",
			"write": true,
			"folder": "308d7d0f-e3cd-127d-5e62-5f32ad73139a"
		},
		{
			"id": "d4fa250b-2752-5b6d-21a7-38e9336062e8",
			"headers": "",
			"url": "{{host}}/users/{{firstUserId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Response is object\"] = _.isObject(data);\n    \n    \n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1431994278790,
			"name": "Get a user",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false
		},
		{
			"id": "e0e7fa90-47bf-5301-042b-a3500d855a14",
			"headers": "",
			"url": "{{host}}/users",
			"preRequestScript": "function pausecomp(millis)\n {\n  var date = new Date();\n  var curDate = null;\n  do { curDate = new Date(); }\n  while(curDate-date < millis);\n}\n\npausecomp(2000); //wait 2 seconds to allow queue runner to execute.",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Response is array\"] = _.isArray(data);\n    \n    tests[\"current count (\"+data.length+\") == old count (\"+globals.userCount+\") + 1\"] = data.length === Number(globals.userCount) + 1;\n    \n}catch(e){\n    tests[e.message] = false;\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1431994834263,
			"name": "queue: count users",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false
		},
		{
			"id": "eae2d54d-f5b4-0606-7e2d-86fe97da00cf",
			"headers": "",
			"url": "{{host}}/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Response is array\"] = _.isArray(data);\n    \n    postman.setGlobalVariable(\"userCount\", data.length);\n    \n    tests[\"User count is: \"+data.length] = true;\n    \n}catch(e){\n    tests[e.message] = false;\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1431994171734,
			"name": "queue: get all users",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false
		},
		{
			"id": "fdf53645-7584-a5a6-b1a8-73c2fa3c0da0",
			"headers": "Accept: application/json\n",
			"url": "{{host}}/test/internal-exception",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 500\"] = responseCode.code === 500;\n\n\ntry {\n    var data = JSON.parse(responseBody);\n    tests[\"Error response has message\"] = !!data.message;\n    tests[\"Error message is not empty\"] = data.message.length > 0;\n}catch(e){\n    tests[e.message] = false;\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1431998531084,
			"name": "exception: internal exception",
			"description": "",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"responses": [],
			"synced": false
		}
	]
}