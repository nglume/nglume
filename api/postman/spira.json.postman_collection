{
	"id": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
	"name": "spira",
	"description": "",
	"order": [],
	"folders": [
		{
			"id": "93694a12-e84a-202c-1ad0-6e3a404c86fb",
			"name": "0_setup",
			"description": "",
			"write": true,
			"order": [
				"2c769e5a-b2e7-34d2-4f74-ea600b1b6815",
				"39aba647-ec5f-b890-eee7-04082d2ae528",
				"e78cccd3-f45d-a64f-532c-f2a9917f8154"
			],
			"collection_name": "spira",
			"collection_owner": "717",
			"collection_id": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"collection": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"owner": "717",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2"
		},
		{
			"id": "b38a066e-08a9-f063-5eeb-4d1ce4253b1c",
			"name": "10_exceptionTests",
			"description": "",
			"write": true,
			"order": [
				"11d236dc-bf6f-aac9-8d08-f86c6d3468b0",
				"beaf083d-6cac-bc2c-00cd-99dbfe52dd8f",
				"0c8623aa-d27e-eff3-c652-e53ff1a1183f"
			],
			"collection_name": "spira",
			"collection_owner": "717",
			"collection_id": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"collection": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"owner": "717",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2"
		},
		{
			"id": "4cccd7eb-1e1a-4693-8d72-0666cabe1366",
			"name": "20_cacheTests",
			"description": "",
			"write": true,
			"order": [
				"94e47b09-7cd4-bcf1-37e5-d661b30efefe",
				"b21f26e6-cbd5-de39-4a91-ed7101115ca1"
			],
			"collection_name": "spira",
			"collection_owner": "717",
			"collection_id": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"collection": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"owner": "717",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2"
		},
		{
			"id": "719b37f0-c861-af11-166e-e76e8b6f835d",
			"name": "20_emailTests",
			"description": "",
			"write": true,
			"order": [
				"d3790d79-1a2c-4a9d-04a9-4b25692eda70",
				"990f1a8a-4d68-b9fd-2e01-3d995a66ccc6"
			],
			"collection_name": "spira",
			"collection_owner": "717",
			"collection_id": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"collection": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"owner": "717",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2"
		},
		{
			"id": "06524760-ecfd-1658-eb03-d36f74598e69",
			"name": "20_entityTests",
			"description": "",
			"write": true,
			"order": [
				"39f24a52-6b2d-6fc8-d56c-5b2855e72c56",
				"a7eb8fa3-783c-394c-87bc-ca8b2f111707",
				"a89680a6-d9b5-2d2a-1ff1-abfb90a3e75a",
				"fca1c353-e52a-29c8-e2fc-7bc691864da1",
				"0f944bd9-f187-c6df-b044-8bee64c27ddb",
				"4c20959a-791d-219e-c736-6673ae38483f",
				"dbf5879b-e31d-a9c4-c8b3-5d9ea51b6d5b",
				"739c9413-f1f8-f14c-b939-6ee017359547",
				"f87d3764-6955-8fc3-34c4-6bc53b2a05b2",
				"2852fce5-537d-5349-d656-b3ddf1edf351"
			],
			"collection_name": "spira",
			"collection_owner": "717",
			"collection_id": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"collection": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"owner": "717",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9"
		},
		{
			"id": "0720f6ee-3039-926d-c61a-6374aa585d2c",
			"name": "20_logTests",
			"description": "",
			"write": true,
			"order": [
				"366689fb-fad1-11c3-38cb-ee1d4e158c88"
			],
			"collection_name": "spira",
			"collection_owner": "717",
			"collection_id": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"collection": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"owner": "717",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2"
		},
		{
			"id": "3fc55e48-447b-28ca-d5a3-69428122e591",
			"name": "20_queueTests",
			"description": "",
			"write": true,
			"order": [
				"7a14093a-f482-9e65-f0aa-109fe088af02",
				"893714fd-5876-4c7a-50c2-d4663e0be529",
				"3ad31ed4-4747-12fd-6a52-20750d867c82"
			],
			"collection_name": "spira",
			"collection_owner": "717",
			"collection_id": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"collection": "a093d1bb-81a0-b81a-1bfe-40934481cde2",
			"owner": "717",
			"collectionId": "a093d1bb-81a0-b81a-1bfe-40934481cde2"
		}
	],
	"timestamp": 1427604086234,
	"owner": "717",
	"remoteLink": "",
	"public": false,
	"createdAt": null,
	"updatedAt": null,
	"synced": false,
	"requests": [
		{
			"id": "0c8623aa-d27e-eff3-c652-e53ff1a1183f",
			"headers": "Accept: application/json\n",
			"url": "{{host}}/test/fatal-error",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntests[\"Status code is 500\"] = responseCode.code === 500;\n\n\ntry {\n    var data = JSON.parse(responseBody);\n    tests[\"Error response has message\"] = !!data.message;\n    tests[\"Error message is not empty\"] = data.message.length > 0;\n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1432626587875,
			"name": "exception: fatal error",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false,
			"owner": "717",
			"folder": "b38a066e-08a9-f063-5eeb-4d1ce4253b1c"
		},
		{
			"id": "0f944bd9-f187-c6df-b044-8bee64c27ddb",
			"headers": "",
			"url": "{{host}}/test/entities",
			"preRequestScript": "try {\n    \n    var uuid = function(){\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : r & 0x3 | 0x8;\n            return v.toString(16);\n        });\n    };\n    \n    var data = JSON.parse(globals.existingTestEntityJson);\n    \n    data.entityId = uuid();\n    data.varchar = \"New Test Entity\";\n    \n    postman.setGlobalVariable(\"newValidTestEntity\", JSON.stringify(data));\n    \n}catch(e){\n    console.error(e.message);\n}\n\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\ntry {\n    \n    var iso8601Regex = /^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$/;\n    \n    tests[\"Status code is 201\"] = responseCode.code === 201;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Response is object\"] = _.isObject(data);\n    \n    tests[\"Entity has UUID\"] = !!data.entity_id && _.isString(data.entity_id);\n    tests[\"UUID has 36 chars, 4 hyphens\"] = data.entity_id.length == 36 && (data.entity_id.match(/-/g) || []).length == 4;\n    \n    tests[\"Varchar column type is text\"] = _.isString(data.varchar);\n    tests[\"Hash column is a hash\"] = _.isString(data.hash);\n    tests[\"Integer column type is integer\"] = _.isNumber(data.integer) && _.parseInt(data.integer) === data.integer;\n    tests[\"Decimal column type is Decimal\"] = _.isNumber(data.decimal) && _.parseFloat(data.decimal) === data.decimal;\n    tests[\"Nullable column type is null\"] = _.isNull(data.nullable);\n    tests[\"Text column type is text\"] = _.isString(data.text);\n    tests[\"Date column type is a valid ISO8601 date\"] = iso8601Regex.test(data.date);\n    tests[\"Multi word colum is camel cased\"] = _.has(data, 'multiWordColumnTitle');\n    \n    tests[\"createdAt column is a valid ISO8601 date\"] = iso8601Regex.test(data.createdAt);\n    tests[\"updatedAt column is a valid ISO8601 date\"] = iso8601Regex.test(data.updatedAt);\n    \n    \n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1433916634768,
			"name": "Post new test entity (valid)",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false,
			"rawModeData": "{{newValidTestEntity}}"
		},
		{
			"id": "11d236dc-bf6f-aac9-8d08-f86c6d3468b0",
			"headers": "Accept: application/json\n",
			"url": "{{host}}/this-url-does-not-exist",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\n\ntry {\n    var data = JSON.parse(responseBody);\n    tests[\"Error response has message\"] = !!data.message;\n    tests[\"Error message is not empty\"] = data.message.length > 0;\n}catch(e){\n    tests[e.message] = false;\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1431998526433,
			"name": "exception: invalid route",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false,
			"owner": "717",
			"folder": "b38a066e-08a9-f063-5eeb-4d1ce4253b1c"
		},
		{
			"id": "2852fce5-537d-5349-d656-b3ddf1edf351",
			"headers": "",
			"url": "{{host}}/test/entities/{{firstEntityId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    var data = JSON.parse(responseBody);\n    \n    var oldData = JSON.parse(globals.existingTestEntityJson);\n    \n    tests[\"Response is object\"] = _.isObject(data);\n    \n    var iso8601Regex = /^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$/;\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n   \n   \n    tests[\"Varchar column type has updated text\"] = data.varchar == \"Updated Test Entity\";\n    \n    \n    tests[\"updatedAt column is a valid ISO8601 date\"] = iso8601Regex.test(data.updatedAt);\n    \n    tests[\"updatedAt key has updated\"] = new Date(oldData.updatedAt) < new Date(data.updatedAt);\n    \n    postman.setGlobalVariable(\"existingTestEntityJson\", responseBody);\n    \n}catch(e){\n    tests[e.message] = false;\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1433918863177,
			"name": "Check updated test entity",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false
		},
		{
			"id": "2c769e5a-b2e7-34d2-4f74-ea600b1b6815",
			"headers": "",
			"url": "{{host}}",
			"preRequestScript": "globals.clear();",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1433916746181,
			"name": "base: check api is up",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false
		},
		{
			"id": "366689fb-fad1-11c3-38cb-ee1d4e158c88",
			"headers": "Content-Type: application/json\n",
			"url": "{{host}}/test/logs",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 204\"] = responseCode.code === 204;\n    \n    \n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1432363628899,
			"name": "log: add",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false,
			"rawModeData": "[\n    {\n        \"type\": \"info\",\n        \"message\": \"test info log\"\n    },\n    {\n        \"type\": \"warning\",\n        \"message\": \"test warning log\"\n    },\n    {\n        \"type\": \"error\",\n        \"message\": \"test error log\"\n    }\n]",
			"owner": "717",
			"folder": "0720f6ee-3039-926d-c61a-6374aa585d2c"
		},
		{
			"id": "39aba647-ec5f-b890-eee7-04082d2ae528",
			"headers": "",
			"url": "{{mailcatcherHost}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1432009368777,
			"name": "email: check mailcatcher up",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false,
			"owner": "717",
			"folder": "93694a12-e84a-202c-1ad0-6e3a404c86fb"
		},
		{
			"id": "39f24a52-6b2d-6fc8-d56c-5b2855e72c56",
			"headers": "",
			"url": "{{host}}/test/entities",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "HEAD",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    //header checks\n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    tests[\"header `Content-Type` is present\"] = _.has(responseHeaders, 'Content-Type');\n    tests[\"header `Content-Type` has application/json\"] = /application\\/json/.test(responseHeaders['Content-Type']);\n    \n    \n    tests[\"header `Entity-Count` is present\"] = _.has(responseHeaders, 'Entity-Count');\n    tests[\"header `Entity-Count` is > 1\"] = responseHeaders['Entity-Count'] > 1;\n    \n    \n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1433903903496,
			"name": "Head all test entities",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false,
			"owner": "717",
			"folder": "06524760-ecfd-1658-eb03-d36f74598e69"
		},
		{
			"id": "3ad31ed4-4747-12fd-6a52-20750d867c82",
			"headers": "",
			"url": "{{host}}/users",
			"preRequestScript": "function pausecomp(millis)\n {\n  var date = new Date();\n  var curDate = null;\n  do { curDate = new Date(); }\n  while(curDate-date < millis);\n}\n\npausecomp(2000); //wait 2 seconds to allow queue runner to execute.",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Response is array\"] = _.isArray(data);\n    \n    tests[\"current count (\"+data.length+\") == old count (\"+globals.userCount+\") + 1\"] = data.length === Number(globals.userCount) + 1;\n    \n}catch(e){\n    tests[e.message] = false;\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1431994834263,
			"name": "queue: count users",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"folder": "3fc55e48-447b-28ca-d5a3-69428122e591",
			"synced": false,
			"owner": "717"
		},
		{
			"id": "4c20959a-791d-219e-c736-6673ae38483f",
			"headers": "",
			"url": "{{host}}/test/entities",
			"preRequestScript": "try {\n    \n    var uuid = function(){\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : r & 0x3 | 0x8;\n            return v.toString(16);\n        });\n    };\n    \n    var data = JSON.parse(globals.existingTestEntityJson);\n    \n    data.entityId = uuid();\n    data.varchar = \"New Test Entity\";\n    \n    postman.setGlobalVariable(\"newValidTestEntity\", JSON.stringify(data));\n    \n}catch(e){\n    console.error(e.message);\n}\n\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 409 Conflict\"] = responseCode.code === 409;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Response is object\"] = _.isObject(data);\n    tests[\"Error response has message\"] = _.has(data, 'message') && _.isString(data.message);\n    \n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1433918500947,
			"name": "Post new test entity (conflicting) ",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false,
			"rawModeData": "{{newValidTestEntity}}"
		},
		{
			"id": "739c9413-f1f8-f14c-b939-6ee017359547",
			"headers": "",
			"url": "{{host}}/test/entities",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 400 Bad Request\"] = responseCode.code === 400;\n    \n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1433904207087,
			"name": "Post new test entity (invalid json)",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false,
			"rawModeData": "{\n  \"foo\": \"bar\",\n// bad json",
			"owner": "717",
			"folder": "06524760-ecfd-1658-eb03-d36f74598e69"
		},
		{
			"id": "7a14093a-f482-9e65-f0aa-109fe088af02",
			"headers": "",
			"url": "{{host}}/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Response is array\"] = _.isArray(data);\n    \n    postman.setGlobalVariable(\"userCount\", data.length);\n    \n    tests[\"User count is: \"+data.length] = true;\n    \n}catch(e){\n    tests[e.message] = false;\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1431994171734,
			"name": "queue: get all users",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"folder": "3fc55e48-447b-28ca-d5a3-69428122e591",
			"synced": false,
			"owner": "717"
		},
		{
			"id": "893714fd-5876-4c7a-50c2-d4663e0be529",
			"headers": "",
			"url": "{{host}}/test/queue",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    var data = JSON.parse(responseBody);\n    \n    \n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1431930351102,
			"name": "queue: create user",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"folder": "3fc55e48-447b-28ca-d5a3-69428122e591",
			"synced": false,
			"owner": "717"
		},
		{
			"id": "94e47b09-7cd4-bcf1-37e5-d661b30efefe",
			"headers": "Content-Type: application/json\n",
			"url": "{{host}}/test/cache/cacheTest",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 204\"] = responseCode.code === 204;\n    \n    \n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1432079884634,
			"name": "cache: add",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false,
			"rawModeData": "{\n    \"key\": \"cacheTest\",\n    \"value\": \"cacheValue\"\n}",
			"owner": "717",
			"folder": "4cccd7eb-1e1a-4693-8d72-0666cabe1366"
		},
		{
			"id": "990f1a8a-4d68-b9fd-2e01-3d995a66ccc6",
			"headers": "",
			"url": "{{mailcatcherHost}}/messages",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Inbox has message\"] = _.isArray(data) && data.length == 1;\n    \n    tests[\"Email has subject\"] = _.has(data[0], 'subject');\n    tests[\"Subject is 'Test Email'\"] = data[0].subject == 'Test Email';\n    \n}catch(e){\n    tests[e.message] = false;\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1432009294008,
			"name": "email: check mail",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false,
			"folder": "719b37f0-c861-af11-166e-e76e8b6f835d",
			"owner": "717"
		},
		{
			"id": "a7eb8fa3-783c-394c-87bc-ca8b2f111707",
			"headers": "",
			"url": "{{host}}/test/entities",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    //header checks\n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    tests[\"header `Content-Type` is present\"] = _.has(responseHeaders, 'Content-Type');\n    tests[\"header `Content-Type` has application/json\"] = /application\\/json/.test(responseHeaders['Content-Type']);\n    \n    \n    tests[\"header `Entity-Count` is present\"] = _.has(responseHeaders, 'Entity-Count');\n    tests[\"header `Entity-Count` is > 1\"] = responseHeaders['Entity-Count'] > 1;\n    \n    //body checks\n    var data = JSON.parse(responseBody);\n    tests[\"Response is array\"] = _.isArray(data);\n    tests['There is more than one entity'] = data.length > 0;\n    \n    postman.setGlobalVariable(\"firstEntityId\", data[0].entity_id);\n    \n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1433903849897,
			"name": "Get all test entities",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false,
			"folder": "06524760-ecfd-1658-eb03-d36f74598e69",
			"owner": "717"
		},
		{
			"id": "a89680a6-d9b5-2d2a-1ff1-abfb90a3e75a",
			"headers": "",
			"url": "{{host}}/test/entities/{{firstEntityId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "HEAD",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    //header checks\n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    tests[\"header `Content-Type` is present\"] = _.has(responseHeaders, 'Content-Type');\n    tests[\"header `Content-Type` has application/json\"] = /application\\/json/.test(responseHeaders['Content-Type']);\n    \n    \n    tests[\"header `Entity-Count` is present\"] = _.has(responseHeaders, 'Entity-Count');\n    tests[\"header `Entity-Count` is  1\"] = responseHeaders['Entity-Count'] == 1;\n    \n    \n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1433903981823,
			"name": "Head a test entity",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false,
			"owner": "717",
			"folder": "06524760-ecfd-1658-eb03-d36f74598e69"
		},
		{
			"id": "b21f26e6-cbd5-de39-4a91-ed7101115ca1",
			"headers": "",
			"url": "{{host}}/test/cache/cacheTest",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Cache response is object\"] = _.isObject(data);\n    \n    tests[\"Cache response has key\"] = _.has(data, 'key');\n    tests[\"Cache response has value\"] = _.has(data, 'value');\n    \n    tests[\"Cache response key is correct\"] = data['key'] == 'cacheTest';\n    tests[\"Cache response value is correct\"] = data['value'] == 'cacheValue';\n    \n}catch(e){\n    tests[e.message] = false;\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1433125640120,
			"name": "cache: check cache",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false,
			"owner": "717",
			"folder": "4cccd7eb-1e1a-4693-8d72-0666cabe1366"
		},
		{
			"id": "beaf083d-6cac-bc2c-00cd-99dbfe52dd8f",
			"headers": "Accept: application/json\n",
			"url": "{{host}}/test/internal-exception",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 500\"] = responseCode.code === 500;\n\n\ntry {\n    var data = JSON.parse(responseBody);\n    tests[\"Error response has message\"] = !!data.message;\n    tests[\"Error message is not empty\"] = data.message.length > 0;\n}catch(e){\n    tests[e.message] = false;\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1431998531084,
			"name": "exception: internal exception",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false,
			"owner": "717",
			"folder": "b38a066e-08a9-f063-5eeb-4d1ce4253b1c"
		},
		{
			"id": "d3790d79-1a2c-4a9d-04a9-4b25692eda70",
			"headers": "Content-Type: application/json\n",
			"url": "{{host}}/test/email",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Response code is 1\"] = data.response_code == 1;\n    \n    \n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1432010172487,
			"name": "email: send",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false,
			"rawModeData": "{\n    \"subject\": \"Test Email\"\n}",
			"owner": "717",
			"folder": "719b37f0-c861-af11-166e-e76e8b6f835d"
		},
		{
			"id": "dbf5879b-e31d-a9c4-c8b3-5d9ea51b6d5b",
			"headers": "",
			"url": "{{host}}/test/entities",
			"preRequestScript": "try {\n    \n    var uuid = function(){\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : r & 0x3 | 0x8;\n            return v.toString(16);\n        });\n    };\n    \n    var data = JSON.parse(globals.existingTestEntityJson);\n    \n    data.entityId = 'invalid-uuid';\n    data.varchar = \"Invalid Test Entity\";\n    \n    postman.setGlobalVariable(\"newInvalidTestEntity\", JSON.stringify(data));\n    \n}catch(e){\n    console.error(e.message);\n}\n\n",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 422 Unprocessable Entity\"] = responseCode.code === 422;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Response is object\"] = _.isObject(data);\n    tests[\"Error response has message\"] = _.has(data, 'message') && _.isString(data.message);\n    tests[\"Error response has invalid object\"] = _.has(data, 'invalid') && _.isString(data.invalid);\n    tests[\"Error response has invalid.entityId\"] = _.has(data, 'invalid.entityId') && _.isString(data.invalid);\n    tests[\"Error response has message for invalid.entityId\"] = _.has(data, 'invalid.entityId.message') && _.isString(data.invalid.entityId.message);\n    \n    \n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1433918335503,
			"name": "Post new test entity (invalid uuid)",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false,
			"rawModeData": "{{newInvalidTestEntity}}"
		},
		{
			"id": "e78cccd3-f45d-a64f-532c-f2a9917f8154",
			"headers": "",
			"url": "{{mailcatcherHost}}/messages",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 204\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1432009117437,
			"name": "email: empty inbox",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false,
			"folder": "93694a12-e84a-202c-1ad0-6e3a404c86fb",
			"isFromCollection": true,
			"owner": "717"
		},
		{
			"id": "f87d3764-6955-8fc3-34c4-6bc53b2a05b2",
			"headers": "",
			"url": "{{host}}/test/entities/{{firstEntityId}}",
			"preRequestScript": "try {\n    \n    \n    var data = JSON.parse(globals.existingTestEntityJson);\n    \n    data.varchar = \"Updated Test Entity\";\n    \n    postman.setGlobalVariable(\"updatedValidTestEntity\", JSON.stringify(data));\n    \n}catch(e){\n    console.error(e.message);\n}\n\n",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\ntry {\n    \n    tests[\"Status code is 204\"] = responseCode.code === 204;\n    \n}catch(e){\n    tests[e.message] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1433918642222,
			"name": "Replace existing test entity (valid)",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false,
			"rawModeData": "{{updatedValidTestEntity}}"
		},
		{
			"id": "fca1c353-e52a-29c8-e2fc-7bc691864da1",
			"headers": "",
			"url": "{{host}}/test/entities/{{firstEntityId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\ntry {\n    \n    var iso8601Regex = /^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$/;\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    tests[\"header `Content-Type` is present\"] = _.has(responseHeaders, 'Content-Type');\n    tests[\"header `Content-Type` has application/json\"] = /application\\/json/.test(responseHeaders['Content-Type']);\n    \n    \n    tests[\"header `Entity-Count` is present\"] = _.has(responseHeaders, 'Entity-Count');\n    tests[\"header `Entity-Count` is  1\"] = responseHeaders['Entity-Count'] == 1;\n    \n    var data = JSON.parse(responseBody);\n    tests[\"Response is object\"] = _.isObject(data);\n    \n    tests[\"Entity has UUID\"] = !!data.entity_id && _.isString(data.entity_id);\n    tests[\"UUID has 36 chars, 4 hyphens\"] = data.entity_id.length == 36 && (data.entity_id.match(/-/g) || []).length == 4;\n    \n    tests[\"Varchar column type is text\"] = _.isString(data.varchar);\n    tests[\"Hash column is a hash\"] = _.isString(data.hash);\n    tests[\"Integer column type is integer\"] = _.isNumber(data.integer) && _.parseInt(data.integer) === data.integer;\n    tests[\"Decimal column type is Decimal\"] = _.isNumber(data.decimal) && _.parseFloat(data.decimal) === data.decimal;\n    tests[\"Nullable column type is null\"] = _.isNull(data.nullable);\n    tests[\"Text column type is text\"] = _.isString(data.text);\n    tests[\"Date column type is a valid ISO8601 date\"] = iso8601Regex.test(data.date);\n    tests[\"Multi word colum is camel cased\"] = _.has(data, 'multiWordColumnTitle');\n    \n    tests[\"createdAt column is a valid ISO8601 date\"] = iso8601Regex.test(data.createdAt);\n    tests[\"updatedAt column is a valid ISO8601 date\"] = iso8601Regex.test(data.updatedAt);\n    \n    \n    \n    \n    postman.setGlobalVariable(\"existingTestEntityJson\", responseBody);\n    \n}catch(e){\n    tests[e.message] = false;\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1433915962038,
			"name": "Get a test entity",
			"description": "",
			"collectionId": "b29723e3-aeac-1fc7-4190-949e21ed8ab9",
			"responses": [],
			"synced": false
		}
	]
}